/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.umn.cs.mapreduce;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-17")
public class JobStats implements org.apache.thrift.TBase<JobStats, JobStats._Fields>, java.io.Serializable, Cloneable, Comparable<JobStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobStats");

  private static final org.apache.thrift.protocol.TField NUM_SPLITS_FIELD_DESC = new org.apache.thrift.protocol.TField("numSplits", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_SORT_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSortTasks", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_SUCCESSFUL_SORT_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSuccessfulSortTasks", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_FAILED_SORT_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFailedSortTasks", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_MERGE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMergeTasks", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_SUCCESSFUL_MERGE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSuccessfulMergeTasks", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_FAILED_MERGE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFailedMergeTasks", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField AVERAGE_TIME_TO_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("averageTimeToSort", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField AVERAGE_TIME_TO_MERGE_FIELD_DESC = new org.apache.thrift.protocol.TField("averageTimeToMerge", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobStatsTupleSchemeFactory());
  }

  public int numSplits; // required
  public int totalSortTasks; // required
  public int totalSuccessfulSortTasks; // required
  public int totalFailedSortTasks; // required
  public int totalMergeTasks; // required
  public int totalSuccessfulMergeTasks; // required
  public int totalFailedMergeTasks; // required
  public long averageTimeToSort; // required
  public long averageTimeToMerge; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_SPLITS((short)1, "numSplits"),
    TOTAL_SORT_TASKS((short)2, "totalSortTasks"),
    TOTAL_SUCCESSFUL_SORT_TASKS((short)3, "totalSuccessfulSortTasks"),
    TOTAL_FAILED_SORT_TASKS((short)4, "totalFailedSortTasks"),
    TOTAL_MERGE_TASKS((short)5, "totalMergeTasks"),
    TOTAL_SUCCESSFUL_MERGE_TASKS((short)6, "totalSuccessfulMergeTasks"),
    TOTAL_FAILED_MERGE_TASKS((short)7, "totalFailedMergeTasks"),
    AVERAGE_TIME_TO_SORT((short)8, "averageTimeToSort"),
    AVERAGE_TIME_TO_MERGE((short)9, "averageTimeToMerge");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_SPLITS
          return NUM_SPLITS;
        case 2: // TOTAL_SORT_TASKS
          return TOTAL_SORT_TASKS;
        case 3: // TOTAL_SUCCESSFUL_SORT_TASKS
          return TOTAL_SUCCESSFUL_SORT_TASKS;
        case 4: // TOTAL_FAILED_SORT_TASKS
          return TOTAL_FAILED_SORT_TASKS;
        case 5: // TOTAL_MERGE_TASKS
          return TOTAL_MERGE_TASKS;
        case 6: // TOTAL_SUCCESSFUL_MERGE_TASKS
          return TOTAL_SUCCESSFUL_MERGE_TASKS;
        case 7: // TOTAL_FAILED_MERGE_TASKS
          return TOTAL_FAILED_MERGE_TASKS;
        case 8: // AVERAGE_TIME_TO_SORT
          return AVERAGE_TIME_TO_SORT;
        case 9: // AVERAGE_TIME_TO_MERGE
          return AVERAGE_TIME_TO_MERGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMSPLITS_ISSET_ID = 0;
  private static final int __TOTALSORTTASKS_ISSET_ID = 1;
  private static final int __TOTALSUCCESSFULSORTTASKS_ISSET_ID = 2;
  private static final int __TOTALFAILEDSORTTASKS_ISSET_ID = 3;
  private static final int __TOTALMERGETASKS_ISSET_ID = 4;
  private static final int __TOTALSUCCESSFULMERGETASKS_ISSET_ID = 5;
  private static final int __TOTALFAILEDMERGETASKS_ISSET_ID = 6;
  private static final int __AVERAGETIMETOSORT_ISSET_ID = 7;
  private static final int __AVERAGETIMETOMERGE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_SPLITS, new org.apache.thrift.meta_data.FieldMetaData("numSplits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_SORT_TASKS, new org.apache.thrift.meta_data.FieldMetaData("totalSortTasks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_SUCCESSFUL_SORT_TASKS, new org.apache.thrift.meta_data.FieldMetaData("totalSuccessfulSortTasks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_FAILED_SORT_TASKS, new org.apache.thrift.meta_data.FieldMetaData("totalFailedSortTasks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MERGE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("totalMergeTasks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_SUCCESSFUL_MERGE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("totalSuccessfulMergeTasks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_FAILED_MERGE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("totalFailedMergeTasks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVERAGE_TIME_TO_SORT, new org.apache.thrift.meta_data.FieldMetaData("averageTimeToSort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVERAGE_TIME_TO_MERGE, new org.apache.thrift.meta_data.FieldMetaData("averageTimeToMerge", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobStats.class, metaDataMap);
  }

  public JobStats() {
  }

  public JobStats(
    int numSplits,
    int totalSortTasks,
    int totalSuccessfulSortTasks,
    int totalFailedSortTasks,
    int totalMergeTasks,
    int totalSuccessfulMergeTasks,
    int totalFailedMergeTasks,
    long averageTimeToSort,
    long averageTimeToMerge)
  {
    this();
    this.numSplits = numSplits;
    setNumSplitsIsSet(true);
    this.totalSortTasks = totalSortTasks;
    setTotalSortTasksIsSet(true);
    this.totalSuccessfulSortTasks = totalSuccessfulSortTasks;
    setTotalSuccessfulSortTasksIsSet(true);
    this.totalFailedSortTasks = totalFailedSortTasks;
    setTotalFailedSortTasksIsSet(true);
    this.totalMergeTasks = totalMergeTasks;
    setTotalMergeTasksIsSet(true);
    this.totalSuccessfulMergeTasks = totalSuccessfulMergeTasks;
    setTotalSuccessfulMergeTasksIsSet(true);
    this.totalFailedMergeTasks = totalFailedMergeTasks;
    setTotalFailedMergeTasksIsSet(true);
    this.averageTimeToSort = averageTimeToSort;
    setAverageTimeToSortIsSet(true);
    this.averageTimeToMerge = averageTimeToMerge;
    setAverageTimeToMergeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobStats(JobStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numSplits = other.numSplits;
    this.totalSortTasks = other.totalSortTasks;
    this.totalSuccessfulSortTasks = other.totalSuccessfulSortTasks;
    this.totalFailedSortTasks = other.totalFailedSortTasks;
    this.totalMergeTasks = other.totalMergeTasks;
    this.totalSuccessfulMergeTasks = other.totalSuccessfulMergeTasks;
    this.totalFailedMergeTasks = other.totalFailedMergeTasks;
    this.averageTimeToSort = other.averageTimeToSort;
    this.averageTimeToMerge = other.averageTimeToMerge;
  }

  public JobStats deepCopy() {
    return new JobStats(this);
  }

  @Override
  public void clear() {
    setNumSplitsIsSet(false);
    this.numSplits = 0;
    setTotalSortTasksIsSet(false);
    this.totalSortTasks = 0;
    setTotalSuccessfulSortTasksIsSet(false);
    this.totalSuccessfulSortTasks = 0;
    setTotalFailedSortTasksIsSet(false);
    this.totalFailedSortTasks = 0;
    setTotalMergeTasksIsSet(false);
    this.totalMergeTasks = 0;
    setTotalSuccessfulMergeTasksIsSet(false);
    this.totalSuccessfulMergeTasks = 0;
    setTotalFailedMergeTasksIsSet(false);
    this.totalFailedMergeTasks = 0;
    setAverageTimeToSortIsSet(false);
    this.averageTimeToSort = 0;
    setAverageTimeToMergeIsSet(false);
    this.averageTimeToMerge = 0;
  }

  public int getNumSplits() {
    return this.numSplits;
  }

  public JobStats setNumSplits(int numSplits) {
    this.numSplits = numSplits;
    setNumSplitsIsSet(true);
    return this;
  }

  public void unsetNumSplits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMSPLITS_ISSET_ID);
  }

  /** Returns true if field numSplits is set (has been assigned a value) and false otherwise */
  public boolean isSetNumSplits() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMSPLITS_ISSET_ID);
  }

  public void setNumSplitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMSPLITS_ISSET_ID, value);
  }

  public int getTotalSortTasks() {
    return this.totalSortTasks;
  }

  public JobStats setTotalSortTasks(int totalSortTasks) {
    this.totalSortTasks = totalSortTasks;
    setTotalSortTasksIsSet(true);
    return this;
  }

  public void unsetTotalSortTasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSORTTASKS_ISSET_ID);
  }

  /** Returns true if field totalSortTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSortTasks() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSORTTASKS_ISSET_ID);
  }

  public void setTotalSortTasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSORTTASKS_ISSET_ID, value);
  }

  public int getTotalSuccessfulSortTasks() {
    return this.totalSuccessfulSortTasks;
  }

  public JobStats setTotalSuccessfulSortTasks(int totalSuccessfulSortTasks) {
    this.totalSuccessfulSortTasks = totalSuccessfulSortTasks;
    setTotalSuccessfulSortTasksIsSet(true);
    return this;
  }

  public void unsetTotalSuccessfulSortTasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSUCCESSFULSORTTASKS_ISSET_ID);
  }

  /** Returns true if field totalSuccessfulSortTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSuccessfulSortTasks() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSUCCESSFULSORTTASKS_ISSET_ID);
  }

  public void setTotalSuccessfulSortTasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSUCCESSFULSORTTASKS_ISSET_ID, value);
  }

  public int getTotalFailedSortTasks() {
    return this.totalFailedSortTasks;
  }

  public JobStats setTotalFailedSortTasks(int totalFailedSortTasks) {
    this.totalFailedSortTasks = totalFailedSortTasks;
    setTotalFailedSortTasksIsSet(true);
    return this;
  }

  public void unsetTotalFailedSortTasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALFAILEDSORTTASKS_ISSET_ID);
  }

  /** Returns true if field totalFailedSortTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFailedSortTasks() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALFAILEDSORTTASKS_ISSET_ID);
  }

  public void setTotalFailedSortTasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALFAILEDSORTTASKS_ISSET_ID, value);
  }

  public int getTotalMergeTasks() {
    return this.totalMergeTasks;
  }

  public JobStats setTotalMergeTasks(int totalMergeTasks) {
    this.totalMergeTasks = totalMergeTasks;
    setTotalMergeTasksIsSet(true);
    return this;
  }

  public void unsetTotalMergeTasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMERGETASKS_ISSET_ID);
  }

  /** Returns true if field totalMergeTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMergeTasks() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMERGETASKS_ISSET_ID);
  }

  public void setTotalMergeTasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMERGETASKS_ISSET_ID, value);
  }

  public int getTotalSuccessfulMergeTasks() {
    return this.totalSuccessfulMergeTasks;
  }

  public JobStats setTotalSuccessfulMergeTasks(int totalSuccessfulMergeTasks) {
    this.totalSuccessfulMergeTasks = totalSuccessfulMergeTasks;
    setTotalSuccessfulMergeTasksIsSet(true);
    return this;
  }

  public void unsetTotalSuccessfulMergeTasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSUCCESSFULMERGETASKS_ISSET_ID);
  }

  /** Returns true if field totalSuccessfulMergeTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSuccessfulMergeTasks() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSUCCESSFULMERGETASKS_ISSET_ID);
  }

  public void setTotalSuccessfulMergeTasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSUCCESSFULMERGETASKS_ISSET_ID, value);
  }

  public int getTotalFailedMergeTasks() {
    return this.totalFailedMergeTasks;
  }

  public JobStats setTotalFailedMergeTasks(int totalFailedMergeTasks) {
    this.totalFailedMergeTasks = totalFailedMergeTasks;
    setTotalFailedMergeTasksIsSet(true);
    return this;
  }

  public void unsetTotalFailedMergeTasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALFAILEDMERGETASKS_ISSET_ID);
  }

  /** Returns true if field totalFailedMergeTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFailedMergeTasks() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALFAILEDMERGETASKS_ISSET_ID);
  }

  public void setTotalFailedMergeTasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALFAILEDMERGETASKS_ISSET_ID, value);
  }

  public long getAverageTimeToSort() {
    return this.averageTimeToSort;
  }

  public JobStats setAverageTimeToSort(long averageTimeToSort) {
    this.averageTimeToSort = averageTimeToSort;
    setAverageTimeToSortIsSet(true);
    return this;
  }

  public void unsetAverageTimeToSort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGETIMETOSORT_ISSET_ID);
  }

  /** Returns true if field averageTimeToSort is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageTimeToSort() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGETIMETOSORT_ISSET_ID);
  }

  public void setAverageTimeToSortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGETIMETOSORT_ISSET_ID, value);
  }

  public long getAverageTimeToMerge() {
    return this.averageTimeToMerge;
  }

  public JobStats setAverageTimeToMerge(long averageTimeToMerge) {
    this.averageTimeToMerge = averageTimeToMerge;
    setAverageTimeToMergeIsSet(true);
    return this;
  }

  public void unsetAverageTimeToMerge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGETIMETOMERGE_ISSET_ID);
  }

  /** Returns true if field averageTimeToMerge is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageTimeToMerge() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGETIMETOMERGE_ISSET_ID);
  }

  public void setAverageTimeToMergeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGETIMETOMERGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_SPLITS:
      if (value == null) {
        unsetNumSplits();
      } else {
        setNumSplits((Integer)value);
      }
      break;

    case TOTAL_SORT_TASKS:
      if (value == null) {
        unsetTotalSortTasks();
      } else {
        setTotalSortTasks((Integer)value);
      }
      break;

    case TOTAL_SUCCESSFUL_SORT_TASKS:
      if (value == null) {
        unsetTotalSuccessfulSortTasks();
      } else {
        setTotalSuccessfulSortTasks((Integer)value);
      }
      break;

    case TOTAL_FAILED_SORT_TASKS:
      if (value == null) {
        unsetTotalFailedSortTasks();
      } else {
        setTotalFailedSortTasks((Integer)value);
      }
      break;

    case TOTAL_MERGE_TASKS:
      if (value == null) {
        unsetTotalMergeTasks();
      } else {
        setTotalMergeTasks((Integer)value);
      }
      break;

    case TOTAL_SUCCESSFUL_MERGE_TASKS:
      if (value == null) {
        unsetTotalSuccessfulMergeTasks();
      } else {
        setTotalSuccessfulMergeTasks((Integer)value);
      }
      break;

    case TOTAL_FAILED_MERGE_TASKS:
      if (value == null) {
        unsetTotalFailedMergeTasks();
      } else {
        setTotalFailedMergeTasks((Integer)value);
      }
      break;

    case AVERAGE_TIME_TO_SORT:
      if (value == null) {
        unsetAverageTimeToSort();
      } else {
        setAverageTimeToSort((Long)value);
      }
      break;

    case AVERAGE_TIME_TO_MERGE:
      if (value == null) {
        unsetAverageTimeToMerge();
      } else {
        setAverageTimeToMerge((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_SPLITS:
      return getNumSplits();

    case TOTAL_SORT_TASKS:
      return getTotalSortTasks();

    case TOTAL_SUCCESSFUL_SORT_TASKS:
      return getTotalSuccessfulSortTasks();

    case TOTAL_FAILED_SORT_TASKS:
      return getTotalFailedSortTasks();

    case TOTAL_MERGE_TASKS:
      return getTotalMergeTasks();

    case TOTAL_SUCCESSFUL_MERGE_TASKS:
      return getTotalSuccessfulMergeTasks();

    case TOTAL_FAILED_MERGE_TASKS:
      return getTotalFailedMergeTasks();

    case AVERAGE_TIME_TO_SORT:
      return getAverageTimeToSort();

    case AVERAGE_TIME_TO_MERGE:
      return getAverageTimeToMerge();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_SPLITS:
      return isSetNumSplits();
    case TOTAL_SORT_TASKS:
      return isSetTotalSortTasks();
    case TOTAL_SUCCESSFUL_SORT_TASKS:
      return isSetTotalSuccessfulSortTasks();
    case TOTAL_FAILED_SORT_TASKS:
      return isSetTotalFailedSortTasks();
    case TOTAL_MERGE_TASKS:
      return isSetTotalMergeTasks();
    case TOTAL_SUCCESSFUL_MERGE_TASKS:
      return isSetTotalSuccessfulMergeTasks();
    case TOTAL_FAILED_MERGE_TASKS:
      return isSetTotalFailedMergeTasks();
    case AVERAGE_TIME_TO_SORT:
      return isSetAverageTimeToSort();
    case AVERAGE_TIME_TO_MERGE:
      return isSetAverageTimeToMerge();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobStats)
      return this.equals((JobStats)that);
    return false;
  }

  public boolean equals(JobStats that) {
    if (that == null)
      return false;

    boolean this_present_numSplits = true;
    boolean that_present_numSplits = true;
    if (this_present_numSplits || that_present_numSplits) {
      if (!(this_present_numSplits && that_present_numSplits))
        return false;
      if (this.numSplits != that.numSplits)
        return false;
    }

    boolean this_present_totalSortTasks = true;
    boolean that_present_totalSortTasks = true;
    if (this_present_totalSortTasks || that_present_totalSortTasks) {
      if (!(this_present_totalSortTasks && that_present_totalSortTasks))
        return false;
      if (this.totalSortTasks != that.totalSortTasks)
        return false;
    }

    boolean this_present_totalSuccessfulSortTasks = true;
    boolean that_present_totalSuccessfulSortTasks = true;
    if (this_present_totalSuccessfulSortTasks || that_present_totalSuccessfulSortTasks) {
      if (!(this_present_totalSuccessfulSortTasks && that_present_totalSuccessfulSortTasks))
        return false;
      if (this.totalSuccessfulSortTasks != that.totalSuccessfulSortTasks)
        return false;
    }

    boolean this_present_totalFailedSortTasks = true;
    boolean that_present_totalFailedSortTasks = true;
    if (this_present_totalFailedSortTasks || that_present_totalFailedSortTasks) {
      if (!(this_present_totalFailedSortTasks && that_present_totalFailedSortTasks))
        return false;
      if (this.totalFailedSortTasks != that.totalFailedSortTasks)
        return false;
    }

    boolean this_present_totalMergeTasks = true;
    boolean that_present_totalMergeTasks = true;
    if (this_present_totalMergeTasks || that_present_totalMergeTasks) {
      if (!(this_present_totalMergeTasks && that_present_totalMergeTasks))
        return false;
      if (this.totalMergeTasks != that.totalMergeTasks)
        return false;
    }

    boolean this_present_totalSuccessfulMergeTasks = true;
    boolean that_present_totalSuccessfulMergeTasks = true;
    if (this_present_totalSuccessfulMergeTasks || that_present_totalSuccessfulMergeTasks) {
      if (!(this_present_totalSuccessfulMergeTasks && that_present_totalSuccessfulMergeTasks))
        return false;
      if (this.totalSuccessfulMergeTasks != that.totalSuccessfulMergeTasks)
        return false;
    }

    boolean this_present_totalFailedMergeTasks = true;
    boolean that_present_totalFailedMergeTasks = true;
    if (this_present_totalFailedMergeTasks || that_present_totalFailedMergeTasks) {
      if (!(this_present_totalFailedMergeTasks && that_present_totalFailedMergeTasks))
        return false;
      if (this.totalFailedMergeTasks != that.totalFailedMergeTasks)
        return false;
    }

    boolean this_present_averageTimeToSort = true;
    boolean that_present_averageTimeToSort = true;
    if (this_present_averageTimeToSort || that_present_averageTimeToSort) {
      if (!(this_present_averageTimeToSort && that_present_averageTimeToSort))
        return false;
      if (this.averageTimeToSort != that.averageTimeToSort)
        return false;
    }

    boolean this_present_averageTimeToMerge = true;
    boolean that_present_averageTimeToMerge = true;
    if (this_present_averageTimeToMerge || that_present_averageTimeToMerge) {
      if (!(this_present_averageTimeToMerge && that_present_averageTimeToMerge))
        return false;
      if (this.averageTimeToMerge != that.averageTimeToMerge)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_numSplits = true;
    list.add(present_numSplits);
    if (present_numSplits)
      list.add(numSplits);

    boolean present_totalSortTasks = true;
    list.add(present_totalSortTasks);
    if (present_totalSortTasks)
      list.add(totalSortTasks);

    boolean present_totalSuccessfulSortTasks = true;
    list.add(present_totalSuccessfulSortTasks);
    if (present_totalSuccessfulSortTasks)
      list.add(totalSuccessfulSortTasks);

    boolean present_totalFailedSortTasks = true;
    list.add(present_totalFailedSortTasks);
    if (present_totalFailedSortTasks)
      list.add(totalFailedSortTasks);

    boolean present_totalMergeTasks = true;
    list.add(present_totalMergeTasks);
    if (present_totalMergeTasks)
      list.add(totalMergeTasks);

    boolean present_totalSuccessfulMergeTasks = true;
    list.add(present_totalSuccessfulMergeTasks);
    if (present_totalSuccessfulMergeTasks)
      list.add(totalSuccessfulMergeTasks);

    boolean present_totalFailedMergeTasks = true;
    list.add(present_totalFailedMergeTasks);
    if (present_totalFailedMergeTasks)
      list.add(totalFailedMergeTasks);

    boolean present_averageTimeToSort = true;
    list.add(present_averageTimeToSort);
    if (present_averageTimeToSort)
      list.add(averageTimeToSort);

    boolean present_averageTimeToMerge = true;
    list.add(present_averageTimeToMerge);
    if (present_averageTimeToMerge)
      list.add(averageTimeToMerge);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumSplits()).compareTo(other.isSetNumSplits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumSplits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numSplits, other.numSplits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSortTasks()).compareTo(other.isSetTotalSortTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSortTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSortTasks, other.totalSortTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSuccessfulSortTasks()).compareTo(other.isSetTotalSuccessfulSortTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSuccessfulSortTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSuccessfulSortTasks, other.totalSuccessfulSortTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalFailedSortTasks()).compareTo(other.isSetTotalFailedSortTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFailedSortTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFailedSortTasks, other.totalFailedSortTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMergeTasks()).compareTo(other.isSetTotalMergeTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMergeTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMergeTasks, other.totalMergeTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSuccessfulMergeTasks()).compareTo(other.isSetTotalSuccessfulMergeTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSuccessfulMergeTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSuccessfulMergeTasks, other.totalSuccessfulMergeTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalFailedMergeTasks()).compareTo(other.isSetTotalFailedMergeTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFailedMergeTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFailedMergeTasks, other.totalFailedMergeTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageTimeToSort()).compareTo(other.isSetAverageTimeToSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageTimeToSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageTimeToSort, other.averageTimeToSort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageTimeToMerge()).compareTo(other.isSetAverageTimeToMerge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageTimeToMerge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageTimeToMerge, other.averageTimeToMerge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobStats(");
    boolean first = true;

    sb.append("numSplits:");
    sb.append(this.numSplits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSortTasks:");
    sb.append(this.totalSortTasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSuccessfulSortTasks:");
    sb.append(this.totalSuccessfulSortTasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalFailedSortTasks:");
    sb.append(this.totalFailedSortTasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMergeTasks:");
    sb.append(this.totalMergeTasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSuccessfulMergeTasks:");
    sb.append(this.totalSuccessfulMergeTasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalFailedMergeTasks:");
    sb.append(this.totalFailedMergeTasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageTimeToSort:");
    sb.append(this.averageTimeToSort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageTimeToMerge:");
    sb.append(this.averageTimeToMerge);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'numSplits' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalSortTasks' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalSuccessfulSortTasks' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalFailedSortTasks' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalMergeTasks' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalSuccessfulMergeTasks' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalFailedMergeTasks' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'averageTimeToSort' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'averageTimeToMerge' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStatsStandardSchemeFactory implements SchemeFactory {
    public JobStatsStandardScheme getScheme() {
      return new JobStatsStandardScheme();
    }
  }

  private static class JobStatsStandardScheme extends StandardScheme<JobStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_SPLITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numSplits = iprot.readI32();
              struct.setNumSplitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_SORT_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalSortTasks = iprot.readI32();
              struct.setTotalSortTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_SUCCESSFUL_SORT_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalSuccessfulSortTasks = iprot.readI32();
              struct.setTotalSuccessfulSortTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_FAILED_SORT_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalFailedSortTasks = iprot.readI32();
              struct.setTotalFailedSortTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_MERGE_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMergeTasks = iprot.readI32();
              struct.setTotalMergeTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_SUCCESSFUL_MERGE_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalSuccessfulMergeTasks = iprot.readI32();
              struct.setTotalSuccessfulMergeTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_FAILED_MERGE_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalFailedMergeTasks = iprot.readI32();
              struct.setTotalFailedMergeTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AVERAGE_TIME_TO_SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.averageTimeToSort = iprot.readI64();
              struct.setAverageTimeToSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVERAGE_TIME_TO_MERGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.averageTimeToMerge = iprot.readI64();
              struct.setAverageTimeToMergeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumSplits()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numSplits' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalSortTasks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalSortTasks' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalSuccessfulSortTasks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalSuccessfulSortTasks' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalFailedSortTasks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalFailedSortTasks' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalMergeTasks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalMergeTasks' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalSuccessfulMergeTasks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalSuccessfulMergeTasks' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalFailedMergeTasks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalFailedMergeTasks' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAverageTimeToSort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'averageTimeToSort' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAverageTimeToMerge()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'averageTimeToMerge' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_SPLITS_FIELD_DESC);
      oprot.writeI32(struct.numSplits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SORT_TASKS_FIELD_DESC);
      oprot.writeI32(struct.totalSortTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SUCCESSFUL_SORT_TASKS_FIELD_DESC);
      oprot.writeI32(struct.totalSuccessfulSortTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FAILED_SORT_TASKS_FIELD_DESC);
      oprot.writeI32(struct.totalFailedSortTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MERGE_TASKS_FIELD_DESC);
      oprot.writeI32(struct.totalMergeTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SUCCESSFUL_MERGE_TASKS_FIELD_DESC);
      oprot.writeI32(struct.totalSuccessfulMergeTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FAILED_MERGE_TASKS_FIELD_DESC);
      oprot.writeI32(struct.totalFailedMergeTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_TIME_TO_SORT_FIELD_DESC);
      oprot.writeI64(struct.averageTimeToSort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_TIME_TO_MERGE_FIELD_DESC);
      oprot.writeI64(struct.averageTimeToMerge);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobStatsTupleSchemeFactory implements SchemeFactory {
    public JobStatsTupleScheme getScheme() {
      return new JobStatsTupleScheme();
    }
  }

  private static class JobStatsTupleScheme extends TupleScheme<JobStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.numSplits);
      oprot.writeI32(struct.totalSortTasks);
      oprot.writeI32(struct.totalSuccessfulSortTasks);
      oprot.writeI32(struct.totalFailedSortTasks);
      oprot.writeI32(struct.totalMergeTasks);
      oprot.writeI32(struct.totalSuccessfulMergeTasks);
      oprot.writeI32(struct.totalFailedMergeTasks);
      oprot.writeI64(struct.averageTimeToSort);
      oprot.writeI64(struct.averageTimeToMerge);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.numSplits = iprot.readI32();
      struct.setNumSplitsIsSet(true);
      struct.totalSortTasks = iprot.readI32();
      struct.setTotalSortTasksIsSet(true);
      struct.totalSuccessfulSortTasks = iprot.readI32();
      struct.setTotalSuccessfulSortTasksIsSet(true);
      struct.totalFailedSortTasks = iprot.readI32();
      struct.setTotalFailedSortTasksIsSet(true);
      struct.totalMergeTasks = iprot.readI32();
      struct.setTotalMergeTasksIsSet(true);
      struct.totalSuccessfulMergeTasks = iprot.readI32();
      struct.setTotalSuccessfulMergeTasksIsSet(true);
      struct.totalFailedMergeTasks = iprot.readI32();
      struct.setTotalFailedMergeTasksIsSet(true);
      struct.averageTimeToSort = iprot.readI64();
      struct.setAverageTimeToSortIsSet(true);
      struct.averageTimeToMerge = iprot.readI64();
      struct.setAverageTimeToMergeIsSet(true);
    }
  }

}

